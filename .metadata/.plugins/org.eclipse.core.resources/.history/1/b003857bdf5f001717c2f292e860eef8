package com.study.mvc.model.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import oracle.jdbc.driver.OracleTypes;

import org.junit.Assert;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.CallableStatementCallback;
import org.springframework.jdbc.core.CallableStatementCreator;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlInOutParameter;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.SqlReturnResultSet;

import com.study.mvc.model.javabean.Emp;
import com.study.mvc.model.javabean.MyExeception;
import com.study.mvc.model.javabean.PageSpliteInfo;
import com.study.mvc.model.javabean.StudentInfo;
import com.study.mvc.tools.DBUtil;

public class StudentDAOImp implements IStudentDAO {
	private JdbcTemplate jt;
	
	public JdbcTemplate getJt() {
		return jt;
	}
	public void setJt(JdbcTemplate jt) {
		this.jt = jt;
	}

	@Override
	public HashMap getStudentById(int id) {
		HashMap<String, StudentInfo> stuMp = null;
		StudentInfo stu = null;
		String sql = "SELECT id, stuNum, name, sex, age, gradeFrom FROM studentInfoA  WHERE id=? ORDER BY id";
		stu = jt.query(sql, new Object[]{id}, new ResultSetExtractor<StudentInfo>(){

			@Override
			public StudentInfo extractData(ResultSet rs) throws SQLException,
					DataAccessException {
				StudentInfo tmp = null;
				if(rs.next()){
					tmp = new StudentInfo(
							Integer.parseInt(rs.getString("id")),
							Integer.parseInt(rs.getString("stuNum")),
							rs.getString("name"),
							rs.getString("sex"),
							Integer.parseInt(rs.getString("age")),
							rs.getString("gradeFrom"));
				}
				return tmp;
			}
			
		});
		//stuMp.put("stuList", stu);
		System.out.println("stuList " + stu);
		return stuMp;
	}
	
	@Override
	public HashMap getStudentByNum(int num) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap getStudentByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap getStudentBySex(String sex) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap getStudentByAge(int start, int end) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public HashMap getStudentBySchool(String schoolName) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public HashMap getStudentByCondition(int num, String name,
			String sex, int start, int end, 
			String schoolName, PageSpliteInfo pageInfo) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	@Override
	public HashMap getStudentByCondition(int id, String name,
			PageSpliteInfo pageInfo) {
		
		HashMap<String, List<StudentInfo>> stuMp = null;
		List<StudentInfo> stuList = null;
		String sql = "SELECT id, stuNum, name, sex, age, gradeFrom FROM studentInfoA WHERE id=0 ORDER BY id ";
		//jt.query(sql, new Object[]{}, new RowMapper<StudentInfo>()
		stuList = jt.query(sql, new RowMapper<StudentInfo>(){

			@Override
			public StudentInfo mapRow(ResultSet rs, int rowNum)
					throws SQLException {
				System.out.println("111111");
				StudentInfo tmp = null;
				System.out.println("rs" + rs);
				tmp  = new StudentInfo(
							Integer.parseInt(rs.getString("id")),
							Integer.parseInt(rs.getString("stuNum")),
							rs.getString("name"),
							rs.getString("sex"),
							Integer.parseInt(rs.getString("age")),
							rs.getString("gradeFrom"));
				System.out.println("tmp " + tmp);
				return tmp;
			}
		});
		//stuMp.put("stuList", stuList);
		System.out.println("stuList " + stuList);
		return stuMp;
	}

	@Override
	public boolean insertStudentInfo(StudentInfo stu) throws MyExeception {
		System.out.println("stu info " + stu);
		String sql = "INSERT INTO studentInfoA  VALUES(?,?,?,?,?,?)";
		int changeCount = 0;
		try{
			changeCount = jt.update(sql, new Object[]{stu.getId(), stu.getNum(), stu.getName(),
					stu.getSex(),stu.getAge(), stu.getSchool()
				});
		}catch(DataAccessException e){
			throw new MyExeception("添加数据失败");
		}
		if(changeCount==0){
			return false;
		}else{
			return true;
		}
	}

	@Override
	public boolean deleteStudentInfo(int num)  throws MyExeception {
		String sql = "DELETE FROM studentInfoA  WHERE id=?";
		int changeCount = 0;
		try{
			changeCount = jt.update(sql, new Object[]{num});
		}catch(DataAccessException e){
			throw new MyExeception("删除数据失败");
		}
		if(changeCount==0){
			return false;
		}else{
			return true;
		}
	}

	@Override
	public boolean saveStudentInfo(StudentInfo stu)  throws MyExeception {
		String sql = "UPDATE studentInfoA SET " 
				+ " name=?, age=? WHERE id=?";
		int changeCount = 0;
		try{
			changeCount = jt.update(sql, new Object[]{stu.getName(), 
					stu.getAge(), stu.getId()});
		}catch(DataAccessException e){
			throw new MyExeception("更新数据失败");
		}
		if(changeCount==0){
			return false;
		}else{
			return true;
		}
	}
	
/*	public void funcGetFromOracle(){
		String sql = "{? = call testjt(?,?,?)}";
		// 注册所有参数类型, 这里注册的out key 也是获取结果的key
		// SqlOutParameter、SqlInOutParameter、SqlReturnResultSet
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		params.add(new SqlParameter(Types.INTEGER));
		// out采用不需要注册
		params.add(new SqlOutParameter("outInt", Types.INTEGER));
		params.add(new SqlInOutParameter("inoutStr", Types.VARCHAR));
		//params.add(new SqlInOutParameter("inOutName", Types.VARCHAR));  
		// 这里注册返回值类型
		params.add(new SqlReturnResultSet("result",  
				       new ResultSetExtractor<Emp>() {  
				           @Override  
				           public Emp extractData(ResultSet rs) throws SQLException,  
				               DataAccessException {  
				               while(rs.next()) {  
				                  // return new Emp(rs.getInt(1), rs.getString(2));  
				               }  
				              return null;  
				           }
		           		})
				);
		Map<String, Object> outValues = jt.call(  
			       new CallableStatementCreator() {  
			            @Override  
			            public CallableStatement createCallableStatement(Connection conn) throws SQLException {  
			              CallableStatement cstmt = conn.prepareCall(sql);
			              // 这里传参
			              cstmt.setInt(1, 10); 
			              cstmt.registerOutParameter(2, OracleTypes.INTEGER);
			              cstmt.setString(3, "我的inout传参"); 
			              cstmt.registerOutParameter(3, OracleTypes.VARCHAR);
			              return cstmt;  
			    }}, params);  
		//System.out.println(outValues.get("outInt"));
		//System.out.println(outValues.get("inoutStr"));
		//System.out.println(outValues.get("result"));
		//Assert.assertEquals(4, );  
	}*/
	
	public void funcGetFromOracle(){
		String sql = "{? = call testJT1(?)}";
		// 注册所有参数类型, 这里注册的out key 也是获取结果的key
		// SqlOutParameter、SqlInOutParameter、SqlReturnResultSet
		List<SqlParameter> params = new ArrayList<SqlParameter>();
		// out采用不需要注册
		// 这里注册返回值类型， 对返回值可以有不同的处理方式， 返回一个结果， 返回多个结果
		// 按照sql 执行字符串对每个进行赋值类型
		params.add( new SqlReturnResultSet("result",  new RowMapper<Emp>(){
							@Override
							public Emp mapRow(ResultSet rs, int rowNum)
									throws SQLException {
								System.out.println("111111");
								Emp tmp = null;
								System.out.println("rs" + rs);
								tmp  = new Emp(
											Integer.parseInt(rs.getString("empno")),
											rs.getString("ename")
											);
								System.out.println("tmp " + tmp);
								return tmp;
							}
						})
		);
		params.add(new SqlParameter(Types.INTEGER));
		jt.
		Map<String, Object> outValues = jt.call(  
			       new CallableStatementCreator() {  
			            @Override  
			            public CallableStatement createCallableStatement(Connection conn) throws SQLException {  
			              CallableStatement cstmt = conn.prepareCall(sql);
			              System.out.println("cstmt " + cstmt);
			              // 这里传参
			              cstmt.registerOutParameter(1, Types.REF_CURSOR);
			              cstmt.setInt(2, 10); 
			              return cstmt;  
			    }}, params);  
		//System.out.println(outValues.get("outInt"));
		//System.out.println(outValues.get("inoutStr"));
		System.out.println(outValues.get("result"));
		//System.out.println(outValues);
		//Assert.assertEquals(4, );  
	}
	public void myCursorTest(){
		String sql = "{? = call testJT1(?)}";
		List rs = jt.execute(new CallableStatementCreator() {
			// 这个方法负责创建 callAble, 创建会话，并赋值参数
			@Override
			public CallableStatement createCallableStatement(Connection conn)
					throws SQLException {
				CallableStatement pc = conn.prepareCall(sql);
				pc.registerOutParameter(1, OracleTypes.CURSOR);
				pc.setObject(1, 10);
				return pc;
			}
		}, new CallableStatementCallback<List>() {
			
//			上面的那个方法返回值 是下面这个函数的参数
			@Override
			public List doInCallableStatement(CallableStatement cs)
					throws SQLException, DataAccessException {
				cs.execute();
				ResultSet rs = (ResultSet)cs.getObject(1);
				ArrayList<Emp> empList = null;
				if(rs!=null){
					while(rs.next()){
						if(rs.isFirst()){
							
						}
						new Emp(
								Integer.parseInt(rs.getString("empno")),
								rs.getString("ename")
								);
					}
				}
				return null;
			}
		
		});
	
	}
	
	
	public void test() {   
		  List resultList = (List) jt.execute(   
		     new CallableStatementCreator() {   
		        public CallableStatement createCallableStatement(Connection con) throws SQLException {   
		           String storedProc = "{? = call testJT1(?)}";// 调用的sql   
		           CallableStatement cs = con.prepareCall(storedProc);   
		           cs.registerOutParameter(1, OracleTypes.CURSOR);// 注册输出参数的类型 
		           cs.setInt(2, 10);// 设置输入参数的值   
		           return cs;   
		        }   
		     }, new CallableStatementCallback() {   
		        public Object doInCallableStatement(CallableStatement cs) throws SQLException,DataAccessException {   
		           List resultsMap = new ArrayList();   
		           cs.execute();   
		           ResultSet rs = (ResultSet) cs.getObject(2);// 获取游标一行的值   
		           while (rs.next()) {// 转换每行的返回值到Map中   
		              Map rowMap = new HashMap();   
		              rowMap.put("id", rs.getString("id"));   
		              rowMap.put("name", rs.getString("name"));   
		              resultsMap.add(rowMap);   
		           }   
		           rs.close();   
		           return resultsMap;   
		        }   
		  });   
	}  
	
	
	public static void main(String[] args) throws MyExeception {
		ApplicationContext ac = new ClassPathXmlApplicationContext("com/study/spring/config/BackSpringAC.xml");
		StudentDAOImp DAOBean = ac.getBean("DAO", StudentDAOImp.class);
		StudentInfo stu = new StudentInfo(504, 10504, "小军", "男", 24, "西安建筑科技大学");
		//DAOBean.getStudentByCondition(22, "ls", new PageSpliteInfo()); 
		//DAOBean.getStudentById(1);
		//DAOBean.insertStudentInfo(stu);
		//stu.setName("小刚");
		//DAOBean.saveStudentInfo(stu);
		//DAOBean.deleteStudentInfo(504);
		
		DAOBean.funcGetFromOracle();
	}
	
}
